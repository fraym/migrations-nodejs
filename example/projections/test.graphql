type TestProjection
    @permission(all: [])
    @upsertOn(
        on: { topic: "test", eventTypes: ["testType"] }
        filterBy: {
            fields: [
                {
                    projectionField: "field"
                    eventField: "field"
                    type: "String!"
                    operation: "equals"
                }
            ]
        }
    )
    @removeOn(
        on: { topic: "test", eventTypes: ["removeTestType"] }
        filterBy: {
            fields: [
                {
                    projectionField: "field"
                    eventField: "field"
                    type: "String!"
                    operation: "equals"
                }
            ]
        }
    ) {
    field: String! @index
}

# # all directives can be used repeatedly
# type Report @report(projections: ["TestProjection"], groupBy: { field: "field.selector" }) {
# 	sum: Int! @sum(projection: "TestProjection". field: "field.selector", condition: "")
# 	min: Int! @min(projection: "TestProjection". field: "field.selector", condition: "")
# 	max: Int! @max(projection: "TestProjection". field: "field.selector", condition: "")
# 	count: Int! @count(projection: "TestProjection", condition: "")
# 	count: String! @get(projection: "TestProjection", field: "")
# 	hard: string @value(expression)
# }

# ## swr approach??

# sum of [{
# 	elements: [{
# 		elements: [{
# 			obj: {
# 				amount: 123
# 			}
# 		}]
# 	}]
# }]

# - sum / avg / ... als int oder float

# - average
# - median
# - length of array
# - anzahl käufer (distinct sum)
# - get sum in time interval (-x days / hours / months / years)
# - hard set values
# - summen pro ditix event + liste an tickets die dazu gehören (in gegebenem Zeitraum)
# - global reports over all tenants (@global)
